apiVersion: v1
data:
  REGISTER_NON_INTERACTIVE: "true"
  REGISTER_LOCKED: "false"
  METRICS_SERVER: "0.0.0.0:9100"
  CI_SERVER_URL: "http://gitlab.easygo.svc.cluster.local/ci"    #通过k8s的DNS访问gitlab服务  格式为：<service_name>.<namespace>.svc.<cluster_domain>
  RUNNER_REQUEST_CONCURRENCY: "4"
  RUNNER_EXECUTOR: "kubernetes"
  KUBERNETES_NAMESPACE: "easygo"
  KUBERNETES_PRIVILEGED: "true"
#  KUBERNETES_CPU_LIMIT: "1"
#  KUBERNETES_MEMORY_LIMIT: "1Gi"
#  KUBERNETES_SERVICE_CPU_LIMIT: "1"
#  KUBERNETES_SERVICE_MEMORY_LIMIT: "1Gi"
#  KUBERNETES_HELPER_CPU_LIMIT: "500m"
#  KUBERNETES_HELPER_MEMORY_LIMIT: "100Mi"
  KUBERNETES_PULL_POLICY: "if-not-present"
  KUBERNETES_TERMINATIONGRACEPERIODSECONDS: "10"
  KUBERNETES_POLL_INTERVAL: "5"
  KUBERNETES_POLL_TIMEOUT: "360"
kind: ConfigMap
metadata:
  labels:
    app: gitlab-ci-runner
  name: gitlab-ci-runner-cm
  namespace: easygo

---
#只有当 Pod 正常通过 Kubernetes（TERM 信号）终止时，才会触发转轮取消注册。 如果强制终止 Pod（SIGKILL 信号），Runner 将不会注销自身。必须手动完成对这种被杀死的 Runner 的清理，
# 配置清单文件如下
apiVersion: v1
data:
  run.sh: |
    #!/bin/bash
    unregister() {
        kill %1
        echo "Unregistering runner ${RUNNER_NAME} ..."
        /usr/bin/gitlab-ci-multi-runner unregister -t "$(/usr/bin/gitlab-ci-multi-runner list 2>&1 | tail -n1 | awk '{print $4}' | cut -d'=' -f2)" -n ${RUNNER_NAME}
        exit $?
    }
    trap 'unregister' EXIT HUP INT QUIT PIPE TERM
    echo "Registering runner ${RUNNER_NAME} ..."
    /usr/bin/gitlab-ci-multi-runner register -r ${GITLAB_CI_TOKEN}
    sed -i 's/^concurrent.*/concurrent = '"${RUNNER_REQUEST_CONCURRENCY}"'/' /home/gitlab-runner/.gitlab-runner/config.toml
    echo "Starting runner ${RUNNER_NAME} ..."
    /usr/bin/gitlab-ci-multi-runner run -n ${RUNNER_NAME} &
    wait
kind: ConfigMap
metadata:
  labels:
    app: gitlab-ci-runner
  name: gitlab-ci-runner-scripts
  namespace: easygo

---

apiVersion: v1
kind: Secret
metadata:
  name: gitlab-ci-token
  namespace: easygo
  labels:
    app: gitlab-ci-runner
data:
  GITLAB_CI_TOKEN: UFpNNERpM1dKc1BNd000NWJORVYK         # GITLAB_CI_TOKEN, 从gitlab中获取，然后用base64进行加密

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-ci-runner
  namespace: easygo
  labels:
    app: gitlab-ci-runner
spec:
  updateStrategy:
    type: RollingUpdate
  replicas: 1
  serviceName: gitlab-ci-runner
  template:
    metadata:
      labels:
        app: gitlab-ci-runner
    spec:
      volumes:
        - name: gitlab-ci-runner-scripts
          projected:
            sources:
              - configMap:
                  name: gitlab-ci-runner-scripts
                  items:
                    - key: run.sh
                      path: run.sh
                      mode: 0755
      serviceAccountName: gitlab-ci
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        supplementalGroups: [999]
      containers:
        - image: gitlab/gitlab-runner:v11.8.0
          name: gitlab-ci-runner
          command:
            - /scripts/run.sh
          envFrom:
            - configMapRef:
                name: gitlab-ci-runner-cm
            - secretRef:
                name: gitlab-ci-token
          env:
            - name: RUNNER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - containerPort: 9100
              name: http-metrics
              protocol: TCP
          volumeMounts:
            - name: gitlab-ci-runner-scripts
              mountPath: "/scripts"
              readOnly: true
      restartPolicy: Always
  selector:
    matchLabels:
      app: gitlab-ci-runner
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-ci
  namespace: easygo

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitlab-ci
  namespace: easygo
rules:
  - apiGroups: [""]
    resources: ["*"]
    verbs: ["*"]

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitlab-ci
  namespace: easygo
subjects:
  - kind: ServiceAccount
    name: gitlab-ci
    namespace: easygo
roleRef:
  kind: Role
  name: gitlab-ci
  apiGroup: rbac.authorization.k8s.io